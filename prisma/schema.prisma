generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  handle               String?     @unique
  bio                  String?
  image                String?
  email                String?     @unique
  emailVerified        DateTime?
  totalViews           Int         @default(0)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  isAdmin              Boolean     @default(false)
  links                Link[]
  texts                Text[]      // Relation to text items
  templates            Template[]
  linksLocation        String?     @default("top")
  themePalette         Json?       @default("{\"name\": \"Light\", \"palette\": [\"#FFFFFF\", \"#F2F2F2\", \"#1F2937\", \"#6170F8\"]}")
  buttonStyle          String      @default("rounded-md")
  textCardButtonStyle  String      @default("rounded-md")
  profileNameFontSize  Int         @default(16)
  bioFontSize          Int         @default(14)
  linkTitleFontSize    Int         @default(14)
  profileNameFontFamily String     @default("Inter")
  bioFontFamily        String     @default("Inter")
  linkTitleFontFamily  String     @default("Inter")
  profileImageSize     Int         @default(70)
  socialIconSize       Int         @default(20)
  faviconSize          Int         @default(32)
  headToPicturePadding Int         @default(40)
  pictureToNamePadding Int         @default(16)
  betweenCardsPadding  Int         @default(16)
  linkCardHeight       Int         @default(40)
  nameToBioPadding     Int         @default(10)
  bioToSocialPadding   Int         @default(16)
  pageHorizontalMargin Int         @default(20)
  // Frame customization fields
  frameTemplate        String      @default("none")
  frameColor           String      @default("#000000")
  frameThickness       Int         @default(0)
  frameRotation        Int         @default(0)
  pictureRotation      Int         @default(0)
  syncRotation         Boolean     @default(true)
  frameAnimation       Json?       @default("{\"type\": null, \"enabled\": false, \"config\": {}}")
  contentAnimation     Json?       @default("{\"type\": null, \"duration\": 0.5, \"delay\": 0, \"staggered\": false, \"staggerAmount\": 0.1}")
  // Rounded corners frame properties
  frameCornerStyle     String      @default("squircle")
  frameBorderRadius    Int         @default(20)
  frameAllCorners      Boolean     @default(true)
  frameTopLeftRadius   Int         @default(20)
  frameTopRightRadius  Int         @default(20)
  frameBottomLeftRadius Int        @default(20)
  frameBottomRightRadius Int       @default(20)
  frameWidth           Int         @default(512)
  frameHeight          Int         @default(512)
  backgroundImage      String?     // URL to the selected background image
  photoBookLayout      String      @default("grid") // Layout style for photo book: "portfolio", "masonry", "grid", or "carousel"
  photoBookOrder       Int?        @default(9999) // Position of the photo book in relation to links (high number = at the end)
  // View mode settings
  viewMode             String      @default("normal") // 'normal', 'stacked', or 'bento'
  bentoItems           Json?       @default("[]") // Array of items with custom span settings for bento view
  // Legacy field - to be removed after migration
  stackView            Boolean     @default(false) // Whether to display content items in card stack view
  accounts             Account[]
  images               UserImage[]
  backgroundImages     BackgroundImage[]
  photoBookImages      PhotoBookImage[] // Relation to photo book images
  customBackgroundImages String[]             @default([]) // Added field for user-uploaded background images
  sharePrefix         String?                @unique @default(cuid())
  showBranding        Boolean                @default(true)
  verified            Boolean                @default(false)

  // Store the expansion state for connected links
  linkExpansionStates  Json?

  // Stripe Customer Information
  stripeCustomerId          String?   @map("stripe_customer_id")
  stripeSubscriptionId      String?   @map("stripe_subscription_id")
  stripePriceId             String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd    DateTime? @map("stripe_current_period_end")
  stripeSubscriptionStatus  String?   @map("stripe_subscription_status")

  @@unique([handle, email])
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Link {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  url        String
  archived   Boolean   @default(false)
  order      Int
  isSocial   Boolean   @default(false)
  clicks     Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Iframely data
  type         String?
  providerName String?
  embedHtml    String?
  thumbnails   Json?
  authorName   String?
  authorUrl    String?
  iframelyMeta Json?

  alwaysExpandEmbed Boolean @default(false)

  @@index([userId])
}

model UserImage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  publicId   String   @unique // Cloudinary public ID
  url        String
  width      Int?
  height     Int?
  format     String?
  bytes      Int?
  isActive   Boolean  @default(true)
  uploadedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Template {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  isPublic    Boolean  @default(true)
  usageCount  Int      @default(0)
  rating      Float    @default(0)
  ratingCount Int      @default(0)
  thumbnailUrl String?

  // --- User Profile Data (Mirrored from User model) ---
  profileName          String? // Mirrored from User.name
  profileHandle        String? // Mirrored from User.handle
  profileBio           String? // Mirrored from User.bio
  profileImageUrl      String? // Mirrored from User.image

  // --- Styling & Layout Settings ---
  linksLocation        String? @default("top")
  themePalette         Json?   @default("{\"name\": \"Light\", \"palette\": [\"#FFFFFF\", \"#F2F2F2\", \"#1F2937\", \"#6170F8\"]}")
  buttonStyle          String  @default("rounded-md")
  textCardButtonStyle  String  @default("rounded-md")
  // Font sizes
  profileNameFontSize  Int     @default(16)
  bioFontSize          Int     @default(14)
  linkTitleFontSize    Int     @default(14)
  // Font families
  profileNameFontFamily String  @default("Inter")
  bioFontFamily        String  @default("Inter")
  linkTitleFontFamily  String  @default("Inter")
  // Element sizes
  profileImageSize     Int     @default(70)
  socialIconSize       Int     @default(20)
  faviconSize          Int     @default(32)
  // Padding and spacing
  headToPicturePadding Int     @default(40)
  pictureToNamePadding Int     @default(16)
  nameToBioPadding     Int     @default(10)
  bioToSocialPadding    Int     @default(16)
  betweenCardsPadding   Int     @default(16)
  linkCardHeight        Int     @default(40)
  pageHorizontalMargin Int     @default(20)
  // Frame settings
  frameTemplate        String  @default("none")
  frameColor           String  @default("#000000")
  frameThickness       Int     @default(0)
  frameRotation        Int     @default(0)
  pictureRotation      Int     @default(0)
  syncRotation         Boolean @default(true)
  frameAnimation       Json?   @default("{\"type\": null, \"enabled\": false, \"config\": {}}")
  contentAnimation     Json?   @default("{\"type\": null, \"duration\": 0.5, \"delay\": 0, \"staggered\": false, \"staggerAmount\": 0.1}")
  // Frame corner properties
  frameCornerStyle     String  @default("squircle")
  frameBorderRadius    Int     @default(20)
  frameAllCorners      Boolean @default(true)
  frameTopLeftRadius   Int     @default(20)
  frameTopRightRadius  Int     @default(20)
  frameBottomLeftRadius Int    @default(20)
  frameBottomRightRadius Int   @default(20)
  // Frame dimensions
  frameWidth           Int     @default(512)
  frameHeight          Int     @default(512)
  // Background and Photo Book
  backgroundImage      String?
  photoBookLayout      String  @default("grid")
  photoBookOrder       Int?    @default(9999)
  photoBookImageData   Json?   // Metadata for photo book images associated with this template

  // --- Link Data ---
  templateLinksData    Json?   // Stores a snapshot of the link data at the time of template creation
  linkExpansionStates  Json? // Store the expansion state for connected links

  @@index([userId])
}

model BackgroundImage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  isPublic    Boolean  @default(true)

  @@index([userId])
}

model PhotoBookImage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  publicId    String   @unique // Cloudinary public ID
  url         String
  title       String?
  description String?
  width       Int?
  height      Int?
  format      String?
  bytes       Int?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Text {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  archived  Boolean  @default(false)
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
